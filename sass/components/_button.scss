.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;


    font-size: 1.6rem;
  }

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba($color-dark-purple, 0.2);
    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba($color-dark-purple, 0.2);
  }




  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  // below is just for demonstration, if we assign a modifier class btn--red to standalone block class btn, the element will change color. if both btn--white and btn--red are assigned to the class of the same btn component, the precedence of statements in scss file will govern which one is implemented. The lower statements will be the ones implemented.
  // &--red {
  //   background-color: green;
  //   color: red;
  //
  //   &::after {
  //     background-color: green;
  //   }
  // }


  &::after {
    content: "";
    display: inline-block;
    /* width and height are for the pseudo element as percentage of parent element */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
  }

  &--animated {
    animation: moveInBottom 1.2s ease-in;
    animation-fill-mode: backwards;
  }

}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary-dark;
    display: inline-block;
    text-decoration: none;
    padding: 3px;
    transition: all .2s;
    @include gradient-text-color;
  }

  &:hover {
    text-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(-2px);
  }

  &:active {
    text-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(2px);
  }
}
